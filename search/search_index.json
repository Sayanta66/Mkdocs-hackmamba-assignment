{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the Protekt Documentation. This page will give you a high level overview on how to use and get the best out of this documentation.</p>"},{"location":"#start-with","title":"Start with","text":"<ul> <li>Introduction: An introduction on what Protekt is and why you should choose it for seamless authentication.</li> <li>Quickstart: A step-by-step guide on how you can integrate integrate Protekt authentication with a simple web app.</li> <li>Integrations: A range of SDK inetgration guides to integrate and use Protekt authentication with your preferred web application, framework, or cloud platform.</li> </ul>"},{"location":"#explore-by-protekt-features-through","title":"Explore by Protekt features through","text":"<ul> <li>Authentication: A quick-take on the different authentication methods provided by Protekt.</li> <li>Single Sign-On (SSO): A glimpse on the seamless single sign-on capability into your application or third-party applications.</li> <li>IAM: Centralize Identity and Access Management across multiple business entities.</li> <li>Multi Factor Authentication (MFA): Strengthen with your authentication with Protekt provided MFA.</li> <li>Security: Understand the various security features offered by Protekt.</li> <li>Branding and Customization: Improved user interaction and streamlined outreach with customized email/sms template, configurable Email/SMS providers, hosted pages, etc.</li> </ul>"},{"location":"#explore-further-with","title":"Explore further with","text":"<ul> <li>API References: Explore detailed API documentation for seamless integration.</li> <li>SDK References: Explore detailed frontend and backend SDK reference documentation for understanding each and every object with ease.</li> <li>Tutorials: A range of full-length tutorials on how to implement multiple Protekt features into different applications.</li> </ul>"},{"location":"Authentication/Standard/Email/","title":"Adding Email-Password Login to your Application","text":"<p>Protekt allows you to add email-password authentication to any application in an instant. This guide will help you configure email login in the Protekt dashboard and add email-password authentication in your application.</p>"},{"location":"Authentication/Standard/Email/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, it's important to make sure you've done a few things first. These are:</p> <ul> <li>Sign-up for a free Protekt account and access the Protekt dashboard to create an application. Learn about our dashboard configuration from the configuration guide.</li> <li>Obtain your Client ID and Domain from the application settings.</li> <li>A basic understanding of your development stack (e.g., JavaScript, React.js, Vue.js, etc.) and installations of your tech stack dependencies.</li> </ul>"},{"location":"Authentication/Standard/Email/#1-enable-email-password-login-in-the-dashboard","title":"1. Enable Email-Password Login in the Dashboard","text":"<p>Before integrating the email-password login in your application, enable it from the dashboard and specify the required details. To enable email login in the Protekt dashboard:</p> <ol> <li>Log in to the Protekt dashboard.</li> <li>Navigate to Authentication &gt; Methods.</li> <li>Toggle the Email + Password button to enabled. Further instruction on password configuration will appear.</li> <li>Set the minimum length of the password according to your requirements.</li> <li>Set the password complexity by checking the required options. The available options are Must have a capital letter and Must have a special character.</li> <li>Click on More Password Settings to set the password reset rules.<ul> <li>Set the number of days after which the user has to reset the password.</li> </ul> </li> <li>Click Okay.</li> </ol>"},{"location":"Authentication/Standard/Email/#2-configure-the-email-templates","title":"2. Configure the Email Templates","text":"<p>Protekt helps you in delivering system emails like welcome, verification, and password-reset emails. To configure such email templates:</p> <ol> <li>Go to Authentication &gt; Email Settings.</li> <li>Use the Protekt-provided templates by default or customize your own template.</li> <li>To use the default templates:<ul> <li>Select the template for each purpose according to your liking.</li> </ul> </li> <li>To use a customized template:<ul> <li>Apply the HTML, CSS, and JS code snippets as required in the respective fields.</li> <li>Click Apply.</li> </ul> </li> <li>If you are using a custom email provider, ensure that the SMTP settings are verified by clicking on the SMTP Configuration collapsible. To do that:<ul> <li>Enter the SMTP Host (e.g., smtp.gmail.com).</li> <li>Ensure the Port for the configuration (587 for TLS, 465 for SSL).</li> <li>Enter your Username (usually your email address).</li> <li>Enter the Password/App Password given for the email provider (or SMTP token from your provider).</li> <li>Specify the From Address (the email address from which the users will receive, e.g., noreply@yourapp.com).</li> <li>Click Save.</li> <li>Click Send Test Email to verify the applied settings.</li> <li>Enter your email address. Protekt will try to send an email to your email address.</li> <li>If you receive the email, the applied settings are verified .</li> </ul> </li> <li>Click Save Template.</li> </ol> <p>Note: More details on the configuration of email templates can be found in Email Templates.</p>"},{"location":"Authentication/Standard/Email/#3-integrate-email-password-login-in-your-application","title":"3. Integrate Email-Password Login in your Application","text":"<p>After verifying all of the above settings and configuration, it's time to integrate the email-password login into your application. Try out the methods below to integrate it through your preferred tech stacks.</p> JavaScriptReactAngular <ol> <li> <p>Install the Protekt JS SDK</p> <p>Protekt provides a JavaScript SDK to simplify the process of integrating Protekt authentication with your application. Install the SDK by executing the following command in your terminal. <pre><code>npm install @protekt/js\n</code></pre></p> </li> <li> <p>Create the Protekt Client</p> <p>Create a new Protekt client provided by the SDK and provide the Client ID and Domain that you obtained earlier. The following code snippet will help you do that: <pre><code>import ProtektAuth from \"@protekt/js\";\n\nconst auth = new ProtektAuth({\n    clientId: \"YOUR_CLIENT_ID\",\n    domain: \"YOUR_DOMAIN.protekt.dev\"\n});\n</code></pre></p> </li> <li> <p>Add Signup to your Application</p> <p>After the client setup is done, you need to set up the signup mechanism for new users in your application. To do this, use the <code>auth.signupWithEmail()</code> method to create a new user account with email and password. The following code block helps you do that. <pre><code>async function signup(email, password) {\n      try {\n        await auth.signupWithEmail({ email, password });\n        alert(\"Check your email to verify your account!\");\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add Login for Existing Users in your Application</p> <p>Once the signup mechanism is added, the login mechanism needs to be added for the existing users in the application. Use the <code>auth.loginWithEmail()</code> method to authenticate an existing user. The code snippet below will help you add that. <pre><code>async function login(email, password) {\n    try {\n        const tokens = await auth.loginWithEmail({ email, password });\n        console.log(\"Access Token:\", tokens.accessToken);\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add SignOut to your Application</p> <p>Finally, once the sign-up/login for a user is completed, it's time to put the sign-out mechanism in place, through which a user will sign out or log out from the application. The auth.logout() method will help in doing that. The following code snippets show how to use that method. <pre><code>async function signout() {\n  try {\n    await auth.logout();\n    console.log(\"User signed out successfully.\");\n    window.location.href = \"/login\";\n    } catch (err) {\n        console.error(\"Sign out failed:\", err);\n    }\n}\n</code></pre></p> </li> </ol> <ol> <li> <p>Install the Protekt React SDK</p> <p>Protekt provides a React.js SDK to simplify the process of integrating Protekt authentication with your application. Install the SDK by executing the following command in your terminal. <pre><code>npm install @protekt-react/js\n</code></pre></p> </li> <li> <p>Create the Protekt Client</p> <p>Create a new Protekt client provided by the SDK and provide the Client ID and Domain that you obtained earlier. The following code snippet will help you do that: <pre><code>import React, { useState } from \"react\";\nimport ProtektAuth from \"@protekt-react/js\";\n\nconst auth = new ProtektAuth({\nclientId: \"YOUR_CLIENT_ID\",\ndomain: \"YOUR_DOMAIN.protekt.dev\"\n});\n</code></pre></p> </li> <li> <p>Add Signup to your Application</p> <p>After the client setup is done, you need to set up the signup mechanism for new users in your application. To do this, use the <code>auth.signupWithEmail()</code> method to create a new user account with email and password. The following code block helps you do that. <pre><code>async function signup(email, password) {\n      try {\n        await auth.signupWithEmail({ email, password });\n        alert(\"Check your email to verify your account!\");\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add Login for Existing Users in your Application</p> <p>Once the signup mechanism is added, the login mechanism needs to be added for the existing users in the application. Use the <code>auth.loginWithEmail()</code> method to authenticate an existing user. The below code snippet will help you add that. <pre><code>async function login(email, password) {\n    try {\n        const tokens = await auth.loginWithEmail({ email, password });\n        console.log(\"Access Token:\", tokens.accessToken);\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add Signout to your Application</p> <p>Finally, once the sign-up/login for a user is completed, it's time to put the sign-out mechanism in place, through which a user will sign out or log out from the application. The auth.logout() method will help in doing that. The following code snippets show how to use that method. <pre><code>async function signout() {\n  try {\n    await auth.logout();\n    console.log(\"User signed out successfully.\");\n    window.location.href = \"/login\";\n    } catch (err) {\n        console.error(\"Sign out failed:\", err);\n    }\n}\n</code></pre></p> </li> </ol> <ol> <li> <p>Install the Protekt Angular SDK</p> <p>Protekt provides a Angular.js SDK to simplify the process of integrating Protekt authentication with your application. Install the SDK by executing the following command in your terminal. <pre><code>npm install @protekt-angular/js\n</code></pre></p> </li> <li> <p>Create the Protekt Client</p> <p>Create a new Protekt client provided by the SDK and provide the Client ID and Domain that you obtained earlier. The following code snippet will help you do that: <pre><code>import { Injectable } from '@angular/core';\nimport ProtektAuth from \"@protekt-angular/js\";\n\nconst auth = new ProtektAuth({\n    clientId: \"YOUR_CLIENT_ID\",\n    domain: \"YOUR_DOMAIN.protekt.dev\"\n});\n</code></pre></p> </li> <li> <p>Add Signup in your Application</p> <p>After the client setup is done, you need to set up the signup mechanism for new users in your application. To do this, use the <code>auth.signupWithEmail()</code> method to create a new user account with email and password. The following code block helps you do that. <pre><code>async function signup(email, password) {\n      try {\n        await auth.signupWithEmail({ email, password });\n        alert(\"Check your email to verify your account!\");\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add Login for Existing Users in your Application</p> <p>Once the signup mechanism is added, the login mechanism needs to be added for the existing users in the application. Use the <code>auth.loginWithEmail()</code> method to authenticate an existing user. The below code snippet will help you add that. <pre><code>async function login(email, password) {\n    try {\n        const tokens = await auth.loginWithEmail({ email, password });\n        console.log(\"Access Token:\", tokens.accessToken);\n    } catch (err) {\n        console.error(err);\n    }\n}\n</code></pre></p> </li> <li> <p>Add Signout to your Application</p> <p>Finally, once the sign-up/login for a user is completed, it's time to put the sign-out mechanism in place, through which a user will sign out or log out from the application. The auth.logout() method will help in doing that. The following code snippets show how to use that method. <pre><code>async function signout() {\n  try {\n    await auth.logout();\n    console.log(\"User signed out successfully.\");\n    window.location.href = \"/login\";\n    } catch (err) {\n        console.error(\"Sign out failed:\", err);\n    }\n}\n</code></pre></p> </li> </ol> <p>More integrations</p> <p>For more detailed integration with different tech stacks, check out our integration guides.</p>"},{"location":"Authentication/Standard/Email/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have made it this far. This means that you have successfully integrated the Protekt email-password authentication in your application. The journey doesn't end here.</p> <p>To learn more about what you can do with Protekt, check out the below features and resources:</p> <ul> <li>Self-Host Protekt</li> <li>Multifactor Authentication</li> </ul>"},{"location":"Getting%20Started/","title":"Introduction","text":""},{"location":"Getting%20Started/#what-is-protekt","title":"What is Protekt?","text":"<p>Protekt is a developer-first authentication platform that can help you integrate authentication methods, IAM, and Single Sign-On (SSO) to your application with limited overhead.</p> <p>Protekt is useful primarily to:</p> <ul> <li>Implement authentication flows in minutes.</li> <li>Easy to navigate dashboard for managing users and roles through your admin (based on our foundation).</li> <li>Follows important and modern standards like OAuth 2.0, OIDC, and SAML.</li> <li>APIs and SDKs that make development and maintenance easy.</li> </ul>"},{"location":"Getting%20Started/#why-should-you-use-protekt","title":"Why should you use Protekt?","text":"<p>Authentication has become quite confusing for most developers. From dealing with tokens to integrating multiple types of authentication, it is a daunting portion of a developer's work. With Protekt, the complexity and challenge of authentication are lifted away by our developer SDKs and our ability to integrate into all of the tools you already use for the required authentication. With Protekt's simple, but comprehensive developer documentation and numerous integrations, developers can concentrate on the 'work' while we put the muscle behind it.</p> <p>Some of the biggest reasons we are great for developers are:</p> <ul> <li>Super-fast Integration: Use our Quickstart Guide and you will have authentication set up and running in your application in minutes.</li> <li>Flexible APIs: Build your own authentication flows with our flexible REST APIs and SDKs.</li> <li>Trusted Security: Trusted security by default with industry-standard encryption and compliance in practice.</li> </ul>"},{"location":"Getting%20Started/#start-your-journey","title":"Start your Journey","text":"<p>To authenticate with Protekt, you first must access the Protekt dashboard by signing up for a free Protekt account at protekt.dev. If you want to learn more about the configuration of the dashboard, check out our configuration guide.</p>"},{"location":"Getting%20Started/#whats-next","title":"What's Next?","text":"<ul> <li>Quickstart: Lightning fast integration</li> <li>First time handling authentication? Check out authentication concepts in layman language</li> <li>Configure Email Login Authentication</li> <li>Explore the API Reference</li> <li>All the tutorials to learn more about Protekt</li> </ul>"},{"location":"Getting%20Started/Quickstart/","title":"Quickstart","text":""}]}